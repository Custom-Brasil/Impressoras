// File Revision
// Rev 1.01
//
// Rev. notes:
// - rel 1.00: first release
// - rel 1.01: Added CcwResult_CodePageUnsupported
// NOTE: Please DO NOT EDIT THIS FILE

///
/// \file ccw_Error.h
/// \brief Error list and description. 
///

#ifndef _COMMON_CCW_ERROR_H__
#define _COMMON_CCW_ERROR_H__


/**
* Error list
*/
typedef enum : DWORD
{
	/// All OK
	CcwResult_OK = 0,					

	/// Open Port/Device Error
	CcwResult_OpenDeviceError = 1,

	/// Unsupported Function
	CcwResult_UnsupportedFunction = 2,

	/// Invalid parameter
	CcwResult_InvalidParameter = 3,

	/// Small buffer
	CcwResult_SmallBuffer = 4,

	/// Null or invalid pointer
	CcwResult_NullPointer = 5,

	/// Library not initialized
	CcwResult_NotInitialized = 6,

	/// Invalid device ID
	CcwResult_InvalidDeviceID = 7,

	/// The device doesn't answer
	CcwResult_ReadError = 8,

	/// Write error
	CcwResult_WriteError = 9,

	/// Unsupported Device
	CcwResult_UnsupportedDevice = 10,

	/// Error communication data
	CcwResult_CommunicationError = 11,

	/// Barcode type unsupported
	CcwResult_BarcodeUnsupportedError = 12,

	/// Barcode width Error
	CcwResult_BarcodeWidthError = 13,

	/// Open Port/Device Error
	CcwResult_DeviceAlreadyOpenError = 14,

	/// Printer doesn't exist Error
	CcwResult_PrinterNotExistError = 15,

	/// Printer unknow Error
	CcwResult_UnknowPrinterError = 16,

	/// File not found or error during the open
	CcwResult_OpenFileError = 17,

	/// Communication busy
	CcwResult_CommunicationBusy = 18,

	/// Code page unsupported
	CcwResult_CodePageUnsupported = 19,

	/// Unknow Error
	CcwResult_UnknowError = 0xFFFFFFFF,
		
} CcwResult;




// Hide in documentation
/// @cond PRIVATE

typedef struct
{
	CcwResult		ccwError;
	const wchar_t*	strDescription;
} CcwErrorType;

//Errors List Size
#define ERROR_CCW_LISTSIZE		(sizeof(ERROR_CCW_LIST)/sizeof(CcwErrorType))

//Errors List description								
const CcwErrorType ERROR_CCW_LIST[] = {
	// Error							// Error Descrition
	{ CcwResult_OK,						L"Ok" },
	{ CcwResult_OpenDeviceError,		L"Open port or device Error" },
	{ CcwResult_UnsupportedFunction,	L"Function not supported by this device" },
	{ CcwResult_InvalidParameter,		L"Parameter value not valid" },
	{ CcwResult_SmallBuffer,			L"Buffer small" },
	{ CcwResult_NullPointer,			L"A parameter is NULL" },
	{ CcwResult_NotInitialized,			L"Library not initialized" },
	{ CcwResult_InvalidDeviceID,		L"Device ID not valid or unknown" },
	{ CcwResult_ReadError,				L"Read data error" },
	{ CcwResult_WriteError,				L"Write data error" },
	{ CcwResult_UnsupportedDevice,		L"Device unknown or unsupported" },
	{ CcwResult_CommunicationError,		L"Communication error" },
	{ CcwResult_BarcodeUnsupportedError, L"Barcode type unknown or unsupported" },
	{ CcwResult_BarcodeWidthError,		L"Barcode width wrong or bigger than print width" },
	{ CcwResult_DeviceAlreadyOpenError, L"Device already open" },
	{ CcwResult_PrinterNotExistError,	L"Printer not found" },
	{ CcwResult_UnknowPrinterError,		L"Unknown Printer" },
	{ CcwResult_OpenFileError,			L"File not found or open error" },
	{ CcwResult_CommunicationBusy,		L"The communication with the device is busy" },
	{ CcwResult_CodePageUnsupported,	L"The codepage selected is unsupported" },	

};


// @endcond


/**
* Translates CcwResult to the related text message.
*
* @param	result		Result value to be translated to text.
*
* @return	A null-terminated string containing the description. 
*/
static const wchar_t* CcwResultToText(CcwResult result)
{
	DWORD i;

	for (i = 0; i<ERROR_CCW_LISTSIZE; i++)
	{
		if (ERROR_CCW_LIST[i].ccwError == result)
			return ERROR_CCW_LIST[i].strDescription;
	}

	return L"Unknown Error";
}


#endif